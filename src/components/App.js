import React, { Component } from 'react';
import { BrowserRouter as Router, Route, Switch} from 'react-router-dom'
import { connect } from 'react-redux';
import PostsListPage from '../pages/PostsListPage'
import PostWritePage from '../pages/PostWritePage'
//import { meFromToken, meFromTokenSuccess, meFromTokenFailure, resetToken } from '../actions/users';

class App extends Component {
  /*
	componentWillMount() {
    this.props.loadUserFromToken();
  }
  */

  render() {
    return (
      <Router>
        <div>
          <Route exect path="/" component={PostsListPage}/>
          <Route path="/posts/new" component={PostWritePage} />
        </div>
      </Router>
    );
  }
}

const mapDispatchToProps = (dispatch) => {
  return {
    /*
    loadUserFromToken: () => {
      let token = sessionStorage.getItem('jwtToken');
  	 	if(!token || token === '') {//if there is no token, dont bother
  	 		return;
  	}

    //fetch user from token (if server deems it's valid token)
    dispatch(meFromToken(token))
      .then((response) => {
        if (!response.error) {
        	//reset token (possibly new token that was regenerated by the server)
        	sessionStorage.setItem('jwtToken', response.payload.data.token);
          dispatch(meFromTokenSuccess(response.payload))
        } else {
        	sessionStorage.removeItem('jwtToken');//remove token from storage
          dispatch(meFromTokenFailure(response.payload));
        }
      });
  	 },
    resetMe: () =>{
      sessionStorage.removeItem('jwtToken'); //remove token from storage
      dispatch(resetToken());
    }
    */
  }
};

export default connect(null, mapDispatchToProps)(App);
